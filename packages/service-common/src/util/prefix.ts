
// methods for supporting prefix-based searches
// REF: https://en.wikipedia.org/wiki/Incremental_search
// ********************************************************************************

// the maximum number of prefixes generated for a given string which in turn bounds
// the number of characters available for matching
// NOTE: this is primarily used to ensure that an arbitrarily-long string does not
//       generate comparable number of prefixes
export const MAX_PREFIX_COUNT = 32/*sane (arbitrary) bound*/;

// ================================================================================
/** creates a bounded prefix array based on the specified normalized string. Use
 *  {@link #createSearchPrefix()} to ensure that the query is bounded in the same
 *  manner.
 *  @see #createSearchPrefix() */
export const createPrefixArray = (normalizedString: string): string[] => {
  normalizedString = normalizedString.substring(0, MAX_PREFIX_COUNT)/*bound by contract*/;

  let accumulator = '';
  return [...normalizedString].map(char => accumulator += char);
};

/** creates a string that can be used with the prefixes generated by {@link #createPrefixArray()}
 *  @see #createPrefixArray() */
export const createSearchPrefix = (normalizedString: string): string =>
  normalizedString.substring(0, MAX_PREFIX_COUNT)/*bound by contract*/;
