/*
  Style Order Convention -- alphabetically ordered within their corresponding scope:
    Properties (that define element behavior)
    Layout
    Sizing
    Spacing
    Everything Else
    Handlers
*/

/* == Constant ================================================================= */
/* NOTE: Must match theme variables. (SEE: core/theme) */
:root {
  --ACTIVE_BUTTON_COLOR: #E2E8F0;
  --HOVER_BUTTON_COLOR: #EDF2F7/*currently only used through CSS file*/;
}

/* == Editor =================================================================== */
.Editor {
  outline: 1px solid transparent;
  /* NOTE: This is needed to match the styles of ProseMirror editor. */
  word-wrap: break-word;
  white-space: pre-wrap;
  white-space: break-spaces;
  -webkit-font-variant-ligatures: none;
  font-variant-ligatures: none;
  font-feature-settings: "liga" 0;
}
/* -- Actionable Node ---------------------------------------------------------- */
.Editor-actionable [actionable-node]:hover {
  cursor: pointer;
}

/* --  Node -------------------------------------------------------------------- */
/*
  REF: https://github.com/ueberdosis/tiptap/issues/911
  make it so that the Cursor does not disappear on empty Nodes (SEE: REF above)
*/
[data-node-type] {
  min-width: 1px;
}

/* == Editor Editable ========================================================== */
/* currently nothing  */

/* == Editor Preview =========================================================== */
.Editor--preview a {
  /* ensure Links always have pointer Cursor on Renderer only */
  cursor: pointer;
}

/* -- Inline Node -------------------------------------------------------------- */
.inlineNodeContainer {
  position: relative;
  display: inline;
}
.ProseMirror-selectednode > span:first-child/*target inline nodes with content (e.g. asyncNodes)*/{
  outline: 1px solid #666;
}
img.ProseMirror-selectednode/*target inline nodes with content (e.g. asyncNodes)*/{
  outline: 1px solid #666;
}

/* -- Node Styles -------------------------------------------------------------- */
/* .. Chip ..................................................................... */
.chip {
  transform: translate(0, 0)/*needed to remove the white background while dragging the chip*/;
  position: relative;
  padding: 3px 28px 2px 10px;
  background-color: #4299E1;
  border-radius: 20px;
  color: white;
  font-size: 14px;
  cursor: grab;
}

.chipCloseButton {
  position: absolute;
  top: 50%;
  right: 6px;
  transform: translateY(calc(-1px - 50%));
  display: flex;
  align-items: center;
  justify-content: center;
  cursor: pointer;
  padding: 2px;
  font-size: 16px;
  font-weight: bold;
  color: rgba(255, 255, 255, 0.4);
  transition: color .3s;
}
.chipCloseButton:hover { color: rgba(255, 255, 255, 0.7);}
.chipCloseButton:focus { color: rgba(255, 255, 255, 0.7); }

/* -- List --------------------------------------------------------------------- */
/* NOTE: the following listItem styles ensure paragraphs inside ListItems or
         TaskListItems do not inherit the regular paragraph styles, which modify
         the margin. This constraint comes from the fact that
         paragraphs must be a child of lists
         (SEE: REF in src/common/notebookEditor/extension/listItem)
         (SEE: REF in src/common/notebookEditor/extension/taskListItem)
*/
/* .. ListItem ................................................................. */
[data-node-type="listItem"] > [data-node-type="listItemContent"] {
  margin: 0px;
}

/* .. TaskListItem ............................................................. */
[data-node-type="taskListItem"] > div > [data-node-type="listItemContent"] {
  margin-left: 4px;
  margin-right: 4px;
  margin-top: 0.25rem;
  margin-bottom: 0.25rem;
}

/* .. OrderedList .............................................................. */
ol[data-node-type="orderedList"] {
  margin-left: 1em;
  padding-left: 1em;
  counter-reset: list;
}
ol[data-node-type="orderedList"] > li[data-node-type="listItem"] {
  counter-increment: list;
}
ol[data-node-type="orderedList"] > li[data-node-type="listItem"]::marker {
  /* NOTE: the listStyle variable is added by the renderer. (SEE: listItem.ts) */
  content: counter(list, var(--listStyleType)) attr(data-attribute-separator) ' '/*add separation between content and Marker*/;
}

/* .. BulletList ............................................................... */
ul[data-node-type="bulletList"] {
  margin-left: 1em;
  padding-left: 1em;
}
ul[data-node-type="bulletList"] > li[data-node-type="listItem"] {
  /*
    ensure ListItems that are children of BulletLists have the default
    style regardless of where they are located
  */
  list-style-type: disc !important;
}

/* .. TaskList ................................................................. */
ul[data-node-type="taskList"] {
  margin-left: 1em;
  padding-left: 1em;

  list-style: none;
  padding: 0;
}
ul[data-node-type="taskList"] > li { display: flex; }
ul[data-node-type="taskList"] > li > label {
	 flex: 0 0 auto;
   margin-top: 0.25em;
	 margin-right: 0.25rem;
	 user-select: none;
}

/* .. MarkHolder ............................................................... */
[data-node-type="markHolder"] {
  /*
    prevent the User from ever setting a Selection with the Cursor that sets
    it behind a MarkHolder. This is also checked by an appendTransaction
    (SEE: MarkHolder.ts)
   */
  display: none/* do not add to PM View */;
}

/* .. Highlight ................................................................ */
.ProseMirror-focused .selected_text {
  /*only show background when editor is no longer focused*/
  background-color: transparent !important;
}
/* set background color on selected text while the editor is not focused. This
   background is not set to data-node-view attributes since it mess up the styles */
.selected_text:not([data-node-view]) {
  background-color: rgba(0,0,0,0.1);
}
/* .. Image .................................................................... */
/* NOTE: Using selector since images are inline nodes but do not have a NodeView */
[data-node-type="image"] {
  position: relative;
  display: inline-block;
}

/* -- Mark Styles -------------------------------------------------------------- */
[data-mark-type="code"] {
  font-family: monospace;
  font-size: 0.8em;
  border: 1px solid #EEEEEE;
  border-radius: 0.25em;
  padding: 1px;
  box-decoration-break: clone;
}

/* .. Gap Cursor ............................................................... */
.ProseMirror-gapcursor {
  display: none;
  position: absolute;
  pointer-events: none;
}

.ProseMirror-gapcursor:after {
  position: absolute;
  display: block;
  top: -2px;
  width: 20px;
  margin-top: 0.25em;
  animation: ProseMirror-cursor-blink 1.1s steps(2, start) infinite;
  border-top: 1px solid black;
  content: '';
}

@keyframes ProseMirror-cursor-blink {
  to { visibility: hidden; }
}

.ProseMirror-focused .ProseMirror-gapcursor { display: block; }

/* -- Tooltip ------------------------------------------------------------------ */
.node_tooltip {
  overflow: hidden;
  z-index: 200;
  width: max-content;
  max-width: 400px;
  height: 0;
  opacity: 0;
  position: absolute;
  top: 0%;
  left: 50%;
  transform: translateX(-50%);
  padding-top: 30px;
  transition: height 0ms 500ms, opacity 0ms 500ms;
}
.node_tooltip--hidden {
  height: 0 !important;
}

.node_tooltip > div   {
  max-height: 100px;
  background-color: #eeeeee;
  border: 1px solid #cccccc;
  padding: 4px 8px;
  border-radius: 2px;

  overflow-y: auto;
  text-overflow: clip;
}

*:hover > .node_tooltip {
  height: auto;
  opacity: 1;
}

/* == Toolbar ================================================================== */
.iconButton {
  width: auto;
  height: auto;

  margin-right: 0.375rem;
  padding: 0.30em;

  border-radius: 50%;
}
.iconButton.active { background-color: var(--ACTIVE_BUTTON_COLOR); }
.iconButton:hover  { background-color: var(--HOVER_BUTTON_COLOR); }

/* == Packages compatibility =================================================== */
/*
  Unfortunately a lot of packages rely on specific CSS rules to work, and in some
  cases they don't work as expected or collide with other packages, for this
  reason manual fixes must be implemented to make sure the Application styles
  works as expected
*/

/*
  Known issue that having two ChakraUI Modals open at the same time the error
  react-remove-scroll-bar error when open more than one modal is shown in the
  console. This is due to the fact that another library sets the body overflow to
  be hidden while react-remove-scroll-bar expects it to be present.

  REF: https://github.com/chakra-ui/chakra-ui/issues/6213.
  NOTE: Using html body to have more priority over the library selector.
*/
html body {
  overflow: auto !important;
}

/* == Chakra =================================================================== */
/* Needed to allow text overflow to be ellipsis on ChakraUI CheckBox components */
.chakra-checkbox__label {
  width: 100%;
  overflow: hidden;
}

/* == Utilities ================================================================ */
/* NOTE: Using class name to override the (seemingly impossible!) styles for the
         input with the accessible props. */
.unit-picker {
  padding: 0 4px !important;
}
/* hides icon */
.unit-picker + div {
  display: none;
}

@keyframes lazy-shown {
  0% { opacity: 0; }
  99% { opacity: 0; }
  100% { opacity: 1; }
}

/** hides the element for the given time */
.lazy-shown {
  animation-name: lazy-shown;
}

/* == Fonts ==================================================================== */
@font-face {
  font-family: 'SourceSerifPro';
  src: local('SourceSerifPro'), url(./public/font/Source_Serif_Pro/SourceSerifPro-Regular.ttf) format('opentype');
}

@font-face {
  font-family: 'SourceSerifPro';
  font-weight: 700;
  src: local('SourceSerifPro'), url(./public/font/Source_Serif_Pro/SourceSerifPro-Bold.ttf) format('opentype');
}

@font-face {
  font-family: 'SourceSerifPro';
  font-style: italic;
  src: local('SourceSerifPro'), url(./public/font/Source_Serif_Pro/SourceSerifPro-Italic.ttf) format('opentype');
}

@font-face {
  font-family: 'SourceSerifPro';
  font-style: italic;
  font-weight: 700;
  src: local('SourceSerifPro'), url(./public/font/Source_Serif_Pro/SourceSerifPro-BoldItalic.ttf) format('opentype');
}
